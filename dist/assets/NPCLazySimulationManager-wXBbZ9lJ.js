import{D as x}from"./index-D3u6562F.js";class _{scene;config;fog;pending=[];replenishTimer;constructor(t,o,s){this.scene=t,this.config=o,this.fog=s}init(){const t=this.config.system,s=this.config.gameplay?.simulation??{},h=Math.max(t.size.width,t.size.height),a=s.initialSpawnRadiusPct??.25,c=h*a;for(const n of t.planets){const e=n.spawn?.quotas;if(!e)continue;const i=n._x??t.star.x+n.orbit.radius,f=n._y??t.star.y;this.enqueueFromQuotas(e,{type:"planet",id:n.id,x:i,y:f},c,`planet:${n.id}`)}for(const n of t.stations??[]){const e=n.spawn?.quotas;if(!e)continue;const i=n.id??`${n.type}_${Math.floor(n.x)}_${Math.floor(n.y)}`;this.enqueueFromQuotas(e,{type:"station",id:i,x:n.x,y:n.y},c,`station:${i}`)}this.scene.events.on(Phaser.Scenes.Events.UPDATE,this.update,this);const r=s.replenish?.checkIntervalMs??24e4;r>0&&(this.replenishTimer=this.scene.time.addEvent({delay:r,loop:!0,callback:this.scheduleReplenish,callbackScope:this}))}destroy(){this.scene.events.off(Phaser.Scenes.Events.UPDATE,this.update,this),this.replenishTimer&&this.replenishTimer.remove(!1),this.pending.length=0}enqueueFromQuotas(t,o,s,h){const a=this.config.system;Math.max(a.size.width,a.size.height);for(const[c,r]of Object.entries(t))for(let n=0;n<(r??0);n++){const e=Math.random()*Math.PI*2,i=Math.random()*s,f=o.x+Math.cos(e)*i,p=o.y+Math.sin(e)*i,l=`${h}:${c}:${n}`,d={x:this.clamp(f,0,a.size.width),y:this.clamp(p,0,a.size.height)};this.pending.push({id:l,prefab:c,home:o,spawnAt:d,created:!1});try{console.log("[NPCSim] pending created",{id:l,prefab:c,home:o,spawnAt:d})}catch{}}}clamp(t,o,s){return Math.max(o,Math.min(s,t))}update(){if(!this.pending.length)return;const t=this.fog.getPlayerPosition(),o=this.config.system,a=(this.config.gameplay?.simulation??{}).lazySpawnRadarBufferPct??.05,c=Math.max(o.size.width,o.size.height)*a,n=this.fog.getRadarRange()+c;for(const e of this.pending){if(e.created)continue;const i=Math.hypot(e.spawnAt.x-t.x,e.spawnAt.y-t.y);if(i<=n){try{console.log("[NPCSim] player touched pending",{id:e.id,prefab:e.prefab,distance:Math.round(i),threshold:Math.round(n)})}catch{}this.createNPC(e)}}}createNPC(t){const o=this.scene.combat;if(!o?.spawnNPCPrefab)return;const s=o.spawnNPCPrefab(t.prefab,t.spawnAt.x,t.spawnAt.y);if(!s)return;s.__homeRef=t.home,this.scene.npcs?.push?.(s),this.fog.registerDynamicObject(s,x.NPC);const a=this.config.stardwellers?.prefabs?.[t.prefab]?.aiProfile,r=(a?this.config.aiProfiles?.profiles?.[a]?.behavior:void 0)??(t.prefab==="pirate"?"patrol":"orbital_trade");if(s.__behavior=r,r==="planet_trader"){const n=this.config.system;let e=null;if(t.home.type==="planet"&&t.home.id&&(e=n.planets.find(i=>i.id===t.home.id)??null),!e){let i=null,f=Number.POSITIVE_INFINITY;for(const p of n.planets){const l=p._x??n.star.x+p.orbit.radius,d=p._y??n.star.y,y=Math.hypot(l-t.spawnAt.x,d-t.spawnAt.y);y<f&&(f=y,i=p)}e=i}s.__targetPlanet=e,s.__state="travel"}else r==="patrol"&&(s.__targetPatrol=null);try{a&&o.setAIProfileFor?.(s,a)}catch{}t.created=!0;try{console.log("[NPCSim] npc created",{id:t.id,prefab:t.prefab,at:t.spawnAt,home:t.home})}catch{}}scheduleReplenish(){const o=this.config.gameplay?.simulation??{},s=o.replenish?.spawnDelayMsRange?.min??5e3,h=o.replenish?.spawnDelayMsRange?.max??45e3,a={},c=(this.scene.npcs??[]).filter(e=>e?.active);for(const e of c){const i=e.__homeRef,f=e.__prefabKey??"unknown",p=i?.id??`${i?.type??"unknown"}_${Math.floor(i?.x??0)}_${Math.floor(i?.y??0)}`,l=`${f}__${p}`;a[l]=(a[l]??0)+1}const r=this.listQuotaEntries();let n=0;for(const e of r){const i=`${e.prefab}__${e.home.id}`,f=a[i]??0,p=Math.max(0,e.count-f);for(let l=0;l<p;l++){const d=Math.random()*Math.PI*2,y=Math.random()*(Math.max(this.config.system.size.width,this.config.system.size.height)*(this.config.gameplay?.simulation?.initialSpawnRadiusPct??.25)),u=e.home.x+Math.cos(d)*y,g=e.home.y+Math.sin(d)*y,b={id:`${e.home.id}:${e.prefab}:repl:${Date.now()}:${l}`,prefab:e.prefab,home:e.home,spawnAt:{x:this.clamp(u,0,this.config.system.size.width),y:this.clamp(g,0,this.config.system.size.height)},created:!1},m=s+Math.random()*(h-s);n++;try{console.log("[NPCSim] replenish schedule",{prefab:e.prefab,home:e.home,delayMs:Math.round(m)})}catch{}this.scene.time.delayedCall(m,()=>this.createNPC(b))}}try{n>0&&console.log("[NPCSim] replenish complete",{totalScheduled:n})}catch{}}listQuotaEntries(){const t=this.config.system,o=[];for(const s of t.planets){const h=s.spawn?.quotas;if(!h)continue;const a=s._x??t.star.x+s.orbit.radius,c=s._y??t.star.y;for(const[r,n]of Object.entries(h))o.push({prefab:r,count:n??0,home:{type:"planet",id:s.id,x:a,y:c}})}for(const s of t.stations??[]){const h=s.spawn?.quotas;if(!h)continue;const a=s.id??`${s.type}_${Math.floor(s.x)}_${Math.floor(s.y)}`;for(const[c,r]of Object.entries(h))o.push({prefab:c,count:r??0,home:{type:"station",id:a,x:s.x,y:s.y}})}return o}}export{_ as NPCLazySimulationManager,_ as default};
