function l(t,i){return Math.random()*(i-t)+t}function o(t,i){return Math.floor(l(t,i+1))}function k(t=0,i=1){let n=0,a=0;for(;n===0;)n=Math.random();for(;a===0;)a=Math.random();return t+i*Math.sqrt(-2*Math.log(n))*Math.cos(2*Math.PI*a)}function v(t){const n={width:Math.min(t.systemSize.width,25e3),height:Math.min(t.systemSize.height,25e3)},a={x:n.width/2,y:n.height/2},S=o(t.starRadius.min,t.starRadius.max),w=o(t.orbits.min,t.orbits.max),M=[];let h=Math.min(S+t.orbitGap.min,1e4);for(let s=0;s<w;s++){const m=o(t.orbitGap.min,t.orbitGap.max);if(h=Math.min(h+m,1e4),h>1e4)break;const c=t.planetTypes[o(0,t.planetTypes.length-1)];M.push({id:`pl_${s}`,name:`${c.name} ${s+1}`,orbit:{radius:h,angularSpeedDegPerSec:l(1,8)},color:c.color,dockRange:220})}const e=t.encounters,y=o(e.count.min,e.count.max),r=[],u=e.radius.min,g=e.radius.max,R=e.minSpacing;let d=0,x=0;for(;d<y&&x<y*20;){x++;const s=Math.min(Math.max(Math.abs(k(0,(g-u)/3))+u,u),g),m=Math.random()*Math.PI*2,c=a.x+Math.cos(m)*s,p=a.y+Math.sin(m)*s;if(!r.every(b=>Math.hypot(b.x-c,b.y-p)>=R))continue;const z=e.types[o(0,e.types.length-1)];r.push({id:`enc_${d}`,name:z.name,x:c,y:p,discovered:!1}),d++}return{size:n,star:a,planets:M,poi:r,dynamicObjects:[]}}export{v as generateSystem};
