import{D as x}from"./index-D1jREstw.js";class _{scene;config;fog;pending=[];replenishTimer;pauseManager;constructor(s,i,e){this.scene=s,this.config=i,this.fog=e}setPauseManager(s){this.pauseManager=s}init(){const s=this.config.system,e=this.config.gameplay?.simulation??{},h=Math.max(s.size.width,s.size.height),a=e.initialSpawnRadiusPct??.25,r=h*a;for(const t of s.planets){const n=t.spawn?.quotas;if(!n)continue;const o=t._x??s.star.x+t.orbit.radius,f=t._y??s.star.y;this.enqueueFromQuotas(n,{type:"planet",id:t.id,x:o,y:f},r,`planet:${t.id}`)}for(const t of s.stations??[]){const n=t.spawn?.quotas;if(!n)continue;const o=t.id??`${t.type}_${Math.floor(t.x)}_${Math.floor(t.y)}`;this.enqueueFromQuotas(n,{type:"station",id:o,x:t.x,y:t.y},r,`station:${o}`)}this.scene.events.on(Phaser.Scenes.Events.UPDATE,this.update,this);const c=e.replenish?.checkIntervalMs??24e4;c>0&&(this.replenishTimer=this.scene.time.addEvent({delay:c,loop:!0,callback:this.scheduleReplenish,callbackScope:this}))}destroy(){this.scene.events.off(Phaser.Scenes.Events.UPDATE,this.update,this),this.replenishTimer&&this.replenishTimer.remove(!1),this.pending.length=0}enqueueFromQuotas(s,i,e,h){const a=this.config.system;Math.max(a.size.width,a.size.height);for(const[r,c]of Object.entries(s))for(let t=0;t<(c??0);t++){const n=Math.random()*Math.PI*2,o=Math.random()*e,f=i.x+Math.cos(n)*o,p=i.y+Math.sin(n)*o,l=`${h}:${r}:${t}`,u={x:this.clamp(f,0,a.size.width),y:this.clamp(p,0,a.size.height)};this.pending.push({id:l,prefab:r,home:i,spawnAt:u,created:!1})}}clamp(s,i,e){return Math.max(i,Math.min(e,s))}update(){if(this.pauseManager?.isSystemPausable("npcLazySimulation")&&this.pauseManager?.getPaused()||!this.pending.length)return;const s=this.fog.getPlayerPosition(),i=this.config.system,a=(this.config.gameplay?.simulation??{}).lazySpawnRadarBufferPct??.05,r=Math.max(i.size.width,i.size.height)*a,t=this.fog.getRadarRange()+r;for(const n of this.pending){if(n.created)continue;Math.hypot(n.spawnAt.x-s.x,n.spawnAt.y-s.y)<=t&&this.createNPC(n)}}createNPC(s){const i=this.scene.combat;if(!i?.spawnNPCPrefab)return;const e=i.spawnNPCPrefab(s.prefab,s.spawnAt.x,s.spawnAt.y);if(!e)return;e.__homeRef=s.home,this.scene.npcs?.push?.(e),this.fog.registerDynamicObject(e,x.NPC);const a=this.config.stardwellers?.prefabs?.[s.prefab]?.aiProfile,c=(a?this.config.aiProfiles?.profiles?.[a]?.behavior:void 0)??(s.prefab==="pirate"?"patrol":"orbital_trade");if(e.__behavior=c,c==="planet_trader"){const t=this.config.system;let n=null;if(s.home.type==="planet"&&s.home.id&&(n=t.planets.find(o=>o.id===s.home.id)??null),!n){let o=null,f=Number.POSITIVE_INFINITY;for(const p of t.planets){const l=p._x??t.star.x+p.orbit.radius,u=p._y??t.star.y,y=Math.hypot(l-s.spawnAt.x,u-s.spawnAt.y);y<f&&(f=y,o=p)}n=o}e.__targetPlanet=n,e.__state="travel"}else c==="patrol"&&(e.__targetPatrol=null);try{a&&i.setAIProfileFor?.(e,a)}catch{}s.created=!0}scheduleReplenish(){const i=this.config.gameplay?.simulation??{},e=i.replenish?.spawnDelayMsRange?.min??5e3,h=i.replenish?.spawnDelayMsRange?.max??45e3,a={},r=(this.scene.npcs??[]).filter(t=>t?.active);for(const t of r){const n=t.__homeRef,o=t.__prefabKey??"unknown",f=n?.id??`${n?.type??"unknown"}_${Math.floor(n?.x??0)}_${Math.floor(n?.y??0)}`,p=`${o}__${f}`;a[p]=(a[p]??0)+1}const c=this.listQuotaEntries();for(const t of c){const n=`${t.prefab}__${t.home.id}`,o=a[n]??0,f=Math.max(0,t.count-o);for(let p=0;p<f;p++){const l=Math.random()*Math.PI*2,u=Math.random()*(Math.max(this.config.system.size.width,this.config.system.size.height)*(this.config.gameplay?.simulation?.initialSpawnRadiusPct??.25)),y=t.home.x+Math.cos(l)*u,d=t.home.y+Math.sin(l)*u,m={id:`${t.home.id}:${t.prefab}:repl:${Date.now()}:${p}`,prefab:t.prefab,home:t.home,spawnAt:{x:this.clamp(y,0,this.config.system.size.width),y:this.clamp(d,0,this.config.system.size.height)},created:!1},g=e+Math.random()*(h-e);this.scene.time.delayedCall(g,()=>this.createNPC(m))}}}listQuotaEntries(){const s=this.config.system,i=[];for(const e of s.planets){const h=e.spawn?.quotas;if(!h)continue;const a=e._x??s.star.x+e.orbit.radius,r=e._y??s.star.y;for(const[c,t]of Object.entries(h))i.push({prefab:c,count:t??0,home:{type:"planet",id:e.id,x:a,y:r}})}for(const e of s.stations??[]){const h=e.spawn?.quotas;if(!h)continue;const a=e.id??`${e.type}_${Math.floor(e.x)}_${Math.floor(e.y)}`;for(const[r,c]of Object.entries(h))i.push({prefab:r,count:c??0,home:{type:"station",id:a,x:e.x,y:e.y}})}return i}}export{_ as NPCLazySimulationManager,_ as default};
